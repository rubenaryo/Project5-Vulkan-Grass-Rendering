#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) buffer Blades {
    Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;
    uint instanceCount;
    uint firstVertex;
    uint firstInstance;
} numBlades;


bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

vec3 computeGravity(vec3 bladeNormal)
{
    const float ENV_GRAVITY_MAG = 9.81;
    
    vec4 D = vec4(0, -1, 0, ENV_GRAVITY_MAG);
    vec3 gE = normalize(D.xyz) * D.w;
    vec3 gF = 0.25 * length(gE) * bladeNormal;

    return gE + gF;
}

void stateValidation(vec3 up, float bladeHeight, vec3 v0, in out vec3 v1, in out vec3 v2)
{
    // Ensure v2 is above ground.
    v2 = v2 - up * min(dot(up, v2-v0), 0.0);

    float l_proj = length(v2 - v0 - up * (dot(v2-v0, up)));
    float l_projOverHeight = l_proj / bladeHeight;

    v1 = v0 + bladeHeight*up*max(1.0 - l_projOverHeight, 0.05*max(l_projOverHeight, 1.0));

    float L0 = length(v2-v0);
    float L1 = length(v1-v0) + length(v2-v1);

    float L = (2.0 * L0 + L1) / 3.0;
    float r = bladeHeight / L;

    vec3 v1_corr = v0 + r * (v1-v0);
    vec3 v2_corr = v1_corr + r * (v2-v1);

    v1 = v1_corr;
    v2 = v2_corr;
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		 //numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade blade = blades[gl_GlobalInvocationID.x];
    vec3 v0 = blade.v0.xyz; 
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = normalize(blade.up.xyz);

    float bladeAngle = blade.v0.w;
    float bladeHeight = blade.v1.w;
    float bladeWidth = blade.v2.w;
    float bladeStiffness = blade.up.w;

    vec3 bitangent = vec3(-cos(bladeAngle), 0.0, sin(bladeAngle));
    vec3 bladeNormal = cross(up, bitangent);

    vec3 gravity = computeGravity(bladeNormal);

    vec3 allForces = gravity;
    v2 += allForces * deltaTime;

    stateValidation(up, bladeHeight, v0, v1, v2);

    blade.v2.xyz = v2;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    //const uint index = atomicAdd(numBlades.vertexCount, 1);
    blades[gl_GlobalInvocationID.x] = blade;
}
